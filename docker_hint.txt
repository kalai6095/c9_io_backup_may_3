search
docker search <name> 
--------------------------------------------------
run docker image

docker run -d <lib_name>   ex: docker run -d redis
docker run -d <lib_name>:<version_no> ex: docker run -d redis:3.2
docker run -d --name redisHostPort -p<host_port>:<container_port> redis:latest    --to open host&container ports using -p
docker run -d --name redisDynamic -p 6379 redis ------   to run same lib with diff port 
docker run -d --name redisDirMapped -v /opt/docker/data/redis:/data redis     ---- to avoid a data loss on re-create docker containers using -v /opt/docker/data/redis to store it in local drive/volume.
 
---------------------------------------------------
running a container in foreground

docker run ubuntu ps   -- launches an ubuntu container and execute the command ps to view all the process running in a container.
docker run -it ubuntu bash --- get access to a bash shell inside of a container
   
 
----------------------------------------------------------------
find running containers:
docker ps   ----  will return docker running containers list.
docker inspect <container-id> ex: docker inspect  819d85c61e38  ---> will return json  -->host,ip,lib,id,image,logs path and etc..
docker logs <container-id>   ex docker logs 819d85c61e38  --- will return logs
---------------------------------------------------------------------


Create docker file

FROM nginx:alpine
COPY . /usr/share/nginx/html


docker build -t <image_name>:<version_number>            ------ to build a docker file  ex: docker  build -t webserver-image:v1 
docker images  --- to list docker images.

docker run -d -p 80:80 <image_name>   ex docker run -d -p 80:80 webserver-image:v1
curl docker ---- able to access the result of port 80
--------------------------------------------------------------------------



deploy nodejs application as container:


FROM node:10-alpine
RUN mkdir -p /src/app
WORKDIR /src/app
COPY package.json /src/app/package.json
RUN npm i
COPY . /src/app
EXPOSE 3000
CMD ["npm","start"]

docker build -t my-nodejs-app-kalai .
docker run -d --name my-running-app -p 3000:3000 my-nodejs-app-kalai 
curl http://docker:3000

pass env variables
docker run -d --name my-production-running-app -e NODE_ENV=production -p 3000:3000 my-nodejs-app-kalai


----------------------------------------------------------------------------


docker mysql  

docker pull mysql:latest
docker run --name db -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123 mysql:latest
docker exec -it db /bin/bash


  $> mysql -u root -p123
  
-----------------------------------------------------


custom mysql 
# This is your Editor pane. Write the Dockerfile here and 
# use the command line to execute commands
FROM mysql:latest
ENV MYSQL_ROOT_PASSWORD 123
ENV MYSQL_DATABASE users
ENV MYSQL_USER kalai
ENV MYSQL_PASSWORD kalai
ADD setup.sql /docker-entrypoint-initdb.d
EXPOSE 3306

setup.sql:

CREATE DATABASE books;
USE books;
CREATE TABLE authors (id INT, name VARCHAR(20), email VARCHAR(20));
INSERT INTO authors (id,name,email) VALUES(1,"Vivek","xuz@abc.com");
INSERT INTO authors (id,name,email) VALUES(2,"Priya","p@gmail.com");
INSERT INTO authors (id,name,email) VALUES(3,"Tom","tom@yahoo.com");


docker build -t docker_custom_db .
docker run --name docker_custom_db_running -d -p 3306:3306 docker_custom_db
docker exec -it docker_custom_db_running /bin/bash    ------ to access bash of custom docker image/containers

----------------------------------------------------------------------------------------------------------------
link multiple containers

docker run --name  docker_custom_mysql_sboot -d -p 8080:8080 docker_custom_mysql_sboot --link docker_custom_db_running -d -p 3306:3306 docker_custom_db_running

docker run -d -t --name work_repo --link docker-mysql:mysql -p 4300:4300 work_repo

----------------------------------------------------------------------------------------------------------------
delete images/containers
docker images
docker images -a


docker image rm <image_name>
docker container rm <container_id>
-------------------------------------------------------------------------------------------------------------------

data folder in 
 
docker run -d --name <image_name> -v "$PWD/data":/data  <image_name>

------------------------------------------------------------------------------------------------------------------

add file in .dockerignore

echo <file_name> >> .dockerignore
docker build -t <name> .

view list of file in docker folder :
docker run <image/container_name> ls /<folder_name>


------------------------------------------------------------------------------------------------------------------
Optimising Dockerfile with onbuild:


vi Dockerfile
      FROM node:7
	  RUN mkdir -p /usr/src/app
	  WORKDIR /usr/src/app
	  ONBUILD COPY package.json /usr/src/app/
	  ONBUILD RUN npm i
	  ONBUILD COPY . /usr/src/app
	  CMD ["npm", "start"]
	  FROM node:7-onbuild # building the images based on the onbuild docker file is the same as before.
	  EXPOSE 3000
	  
	  
docker build -t <image_name> .
docker run -d --name <container_name> -p 3000:3000 <image_name> 

curl http://<container_name>:3000  


------------------------------------------------------------------------------------------------------------------
Data Container

Create a data Container for storing configruation files using 

docker create -v /config --name <image_name> mysql:latest   ---> will create config.conf file in the $pwd
ex: docker create -v /config --name dataMysqlContainer mysql:latest

copy the .conf file to docker_image
docker cp config.conf <image_name>:/config/   
ex: docker cp config.conf dataMysqlContainer:/config/


docker run --volumes-from <image_name> ubuntu ls /config    ---- > -volumes-from <container> option we can use the mount volumes from other containers inside the container bing launched.

Export/Import container

export:
docker export <container_name> > <file_name>.tar
ex: docker export dataMysqlContainer > dataMysqlContainer.tar


import:

docker  import <filename.tar>
ex: docker import dataMysqlContainer.tar


------------------------------------------------------------------------------------------------------------------
docker build from Makefile 

vi Makefile

NAME = makefile_test_build
default: build
  
build:
	docker build -t $(NAME) .
push:
	docker push $(NAME)
debug:
	docker run --rm -it $(NAME) /bin/bash
run:
	docker run --rm $(NAME)
release: 
	build push




--> make build  

------------------------------------------------------------------------------------------------------------------
